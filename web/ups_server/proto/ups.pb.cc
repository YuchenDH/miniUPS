// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ups.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ups.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ups {

namespace {

const ::google::protobuf::Descriptor* UConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* UConnected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UConnected_reflection_ = NULL;
const ::google::protobuf::Descriptor* UGoPickup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UGoPickup_reflection_ = NULL;
const ::google::protobuf::Descriptor* UFinished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UFinished_reflection_ = NULL;
const ::google::protobuf::Descriptor* UDeliveryMade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UDeliveryMade_reflection_ = NULL;
const ::google::protobuf::Descriptor* UDeliveryLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UDeliveryLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* UGoDeliver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UGoDeliver_reflection_ = NULL;
const ::google::protobuf::Descriptor* UCommands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UCommands_reflection_ = NULL;
const ::google::protobuf::Descriptor* UResponses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UResponses_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ups_2eproto() {
  protobuf_AddDesc_ups_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ups.proto");
  GOOGLE_CHECK(file != NULL);
  UConnect_descriptor_ = file->message_type(0);
  static const int UConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, reconnectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, numtrucksinit_),
  };
  UConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UConnect_descriptor_,
      UConnect::default_instance_,
      UConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UConnect));
  UConnected_descriptor_ = file->message_type(1);
  static const int UConnected_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, error_),
  };
  UConnected_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UConnected_descriptor_,
      UConnected::default_instance_,
      UConnected_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UConnected, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UConnected));
  UGoPickup_descriptor_ = file->message_type(2);
  static const int UGoPickup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, whid_),
  };
  UGoPickup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UGoPickup_descriptor_,
      UGoPickup::default_instance_,
      UGoPickup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoPickup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UGoPickup));
  UFinished_descriptor_ = file->message_type(3);
  static const int UFinished_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, y_),
  };
  UFinished_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UFinished_descriptor_,
      UFinished::default_instance_,
      UFinished_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UFinished, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UFinished));
  UDeliveryMade_descriptor_ = file->message_type(4);
  static const int UDeliveryMade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, packageid_),
  };
  UDeliveryMade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UDeliveryMade_descriptor_,
      UDeliveryMade::default_instance_,
      UDeliveryMade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryMade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UDeliveryMade));
  UDeliveryLocation_descriptor_ = file->message_type(5);
  static const int UDeliveryLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, packageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, y_),
  };
  UDeliveryLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UDeliveryLocation_descriptor_,
      UDeliveryLocation::default_instance_,
      UDeliveryLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UDeliveryLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UDeliveryLocation));
  UGoDeliver_descriptor_ = file->message_type(6);
  static const int UGoDeliver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, truckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, packages_),
  };
  UGoDeliver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UGoDeliver_descriptor_,
      UGoDeliver::default_instance_,
      UGoDeliver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UGoDeliver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UGoDeliver));
  UCommands_descriptor_ = file->message_type(7);
  static const int UCommands_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, deliveries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, pickups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, simspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, disconnect_),
  };
  UCommands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UCommands_descriptor_,
      UCommands::default_instance_,
      UCommands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UCommands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UCommands));
  UResponses_descriptor_ = file->message_type(8);
  static const int UResponses_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, completions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, delivered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, finished_),
  };
  UResponses_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UResponses_descriptor_,
      UResponses::default_instance_,
      UResponses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UResponses, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UResponses));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ups_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UConnect_descriptor_, &UConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UConnected_descriptor_, &UConnected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UGoPickup_descriptor_, &UGoPickup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UFinished_descriptor_, &UFinished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UDeliveryMade_descriptor_, &UDeliveryMade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UDeliveryLocation_descriptor_, &UDeliveryLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UGoDeliver_descriptor_, &UGoDeliver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UCommands_descriptor_, &UCommands::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UResponses_descriptor_, &UResponses::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ups_2eproto() {
  delete UConnect::default_instance_;
  delete UConnect_reflection_;
  delete UConnected::default_instance_;
  delete UConnected_reflection_;
  delete UGoPickup::default_instance_;
  delete UGoPickup_reflection_;
  delete UFinished::default_instance_;
  delete UFinished_reflection_;
  delete UDeliveryMade::default_instance_;
  delete UDeliveryMade_reflection_;
  delete UDeliveryLocation::default_instance_;
  delete UDeliveryLocation_reflection_;
  delete UGoDeliver::default_instance_;
  delete UGoDeliver_reflection_;
  delete UCommands::default_instance_;
  delete UCommands_reflection_;
  delete UResponses::default_instance_;
  delete UResponses_reflection_;
}

void protobuf_AddDesc_ups_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tups.proto\022\003ups\"6\n\010UConnect\022\023\n\013reconnec"
    "tid\030\001 \001(\003\022\025\n\rnumtrucksinit\030\002 \001(\005\",\n\nUCon"
    "nected\022\017\n\007worldid\030\001 \002(\003\022\r\n\005error\030\002 \001(\t\"*"
    "\n\tUGoPickup\022\017\n\007truckid\030\001 \002(\005\022\014\n\004whid\030\002 \002"
    "(\005\"2\n\tUFinished\022\017\n\007truckid\030\001 \002(\005\022\t\n\001x\030\002 "
    "\002(\005\022\t\n\001y\030\003 \002(\005\"3\n\rUDeliveryMade\022\017\n\007truck"
    "id\030\001 \002(\005\022\021\n\tpackageid\030\002 \002(\003\"<\n\021UDelivery"
    "Location\022\021\n\tpackageid\030\001 \002(\003\022\t\n\001x\030\002 \002(\005\022\t"
    "\n\001y\030\003 \002(\005\"G\n\nUGoDeliver\022\017\n\007truckid\030\001 \002(\005"
    "\022(\n\010packages\030\002 \003(\0132\026.ups.UDeliveryLocati"
    "on\"w\n\tUCommands\022#\n\ndeliveries\030\001 \003(\0132\017.up"
    "s.UGoDeliver\022\037\n\007pickups\030\002 \003(\0132\016.ups.UGoP"
    "ickup\022\020\n\010simspeed\030\003 \001(\r\022\022\n\ndisconnect\030\004 "
    "\001(\010\"y\n\nUResponses\022#\n\013completions\030\001 \003(\0132\016"
    ".ups.UFinished\022%\n\tdelivered\030\002 \003(\0132\022.ups."
    "UDeliveryMade\022\r\n\005error\030\003 \001(\t\022\020\n\010finished"
    "\030\004 \001(\010", 646);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ups.proto", &protobuf_RegisterTypes);
  UConnect::default_instance_ = new UConnect();
  UConnected::default_instance_ = new UConnected();
  UGoPickup::default_instance_ = new UGoPickup();
  UFinished::default_instance_ = new UFinished();
  UDeliveryMade::default_instance_ = new UDeliveryMade();
  UDeliveryLocation::default_instance_ = new UDeliveryLocation();
  UGoDeliver::default_instance_ = new UGoDeliver();
  UCommands::default_instance_ = new UCommands();
  UResponses::default_instance_ = new UResponses();
  UConnect::default_instance_->InitAsDefaultInstance();
  UConnected::default_instance_->InitAsDefaultInstance();
  UGoPickup::default_instance_->InitAsDefaultInstance();
  UFinished::default_instance_->InitAsDefaultInstance();
  UDeliveryMade::default_instance_->InitAsDefaultInstance();
  UDeliveryLocation::default_instance_->InitAsDefaultInstance();
  UGoDeliver::default_instance_->InitAsDefaultInstance();
  UCommands::default_instance_->InitAsDefaultInstance();
  UResponses::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ups_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ups_2eproto {
  StaticDescriptorInitializer_ups_2eproto() {
    protobuf_AddDesc_ups_2eproto();
  }
} static_descriptor_initializer_ups_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UConnect::kReconnectidFieldNumber;
const int UConnect::kNumtrucksinitFieldNumber;
#endif  // !_MSC_VER

UConnect::UConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UConnect)
}

void UConnect::InitAsDefaultInstance() {
}

UConnect::UConnect(const UConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UConnect)
}

void UConnect::SharedCtor() {
  _cached_size_ = 0;
  reconnectid_ = GOOGLE_LONGLONG(0);
  numtrucksinit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UConnect::~UConnect() {
  // @@protoc_insertion_point(destructor:ups.UConnect)
  SharedDtor();
}

void UConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UConnect_descriptor_;
}

const UConnect& UConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UConnect* UConnect::default_instance_ = NULL;

UConnect* UConnect::New() const {
  return new UConnect;
}

void UConnect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UConnect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reconnectid_, numtrucksinit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 reconnectid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reconnectid_)));
          set_has_reconnectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numtrucksinit;
        break;
      }

      // optional int32 numtrucksinit = 2;
      case 2: {
        if (tag == 16) {
         parse_numtrucksinit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtrucksinit_)));
          set_has_numtrucksinit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UConnect)
  return false;
#undef DO_
}

void UConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UConnect)
  // optional int64 reconnectid = 1;
  if (has_reconnectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->reconnectid(), output);
  }

  // optional int32 numtrucksinit = 2;
  if (has_numtrucksinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numtrucksinit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UConnect)
}

::google::protobuf::uint8* UConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UConnect)
  // optional int64 reconnectid = 1;
  if (has_reconnectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->reconnectid(), target);
  }

  // optional int32 numtrucksinit = 2;
  if (has_numtrucksinit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numtrucksinit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UConnect)
  return target;
}

int UConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 reconnectid = 1;
    if (has_reconnectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reconnectid());
    }

    // optional int32 numtrucksinit = 2;
    if (has_numtrucksinit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtrucksinit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UConnect::MergeFrom(const UConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reconnectid()) {
      set_reconnectid(from.reconnectid());
    }
    if (from.has_numtrucksinit()) {
      set_numtrucksinit(from.numtrucksinit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UConnect::CopyFrom(const UConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UConnect::IsInitialized() const {

  return true;
}

void UConnect::Swap(UConnect* other) {
  if (other != this) {
    std::swap(reconnectid_, other->reconnectid_);
    std::swap(numtrucksinit_, other->numtrucksinit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UConnect_descriptor_;
  metadata.reflection = UConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UConnected::kWorldidFieldNumber;
const int UConnected::kErrorFieldNumber;
#endif  // !_MSC_VER

UConnected::UConnected()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UConnected)
}

void UConnected::InitAsDefaultInstance() {
}

UConnected::UConnected(const UConnected& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UConnected)
}

void UConnected::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  worldid_ = GOOGLE_LONGLONG(0);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UConnected::~UConnected() {
  // @@protoc_insertion_point(destructor:ups.UConnected)
  SharedDtor();
}

void UConnected::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void UConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UConnected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UConnected_descriptor_;
}

const UConnected& UConnected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UConnected* UConnected::default_instance_ = NULL;

UConnected* UConnected::New() const {
  return new UConnected;
}

void UConnected::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    worldid_ = GOOGLE_LONGLONG(0);
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 worldid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UConnected)
  return false;
#undef DO_
}

void UConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UConnected)
  // required int64 worldid = 1;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->worldid(), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UConnected)
}

::google::protobuf::uint8* UConnected::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UConnected)
  // required int64 worldid = 1;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->worldid(), target);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UConnected)
  return target;
}

int UConnected::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 worldid = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->worldid());
    }

    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UConnected::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UConnected* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UConnected*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UConnected::MergeFrom(const UConnected& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UConnected::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UConnected::CopyFrom(const UConnected& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UConnected::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UConnected::Swap(UConnected* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UConnected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UConnected_descriptor_;
  metadata.reflection = UConnected_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UGoPickup::kTruckidFieldNumber;
const int UGoPickup::kWhidFieldNumber;
#endif  // !_MSC_VER

UGoPickup::UGoPickup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UGoPickup)
}

void UGoPickup::InitAsDefaultInstance() {
}

UGoPickup::UGoPickup(const UGoPickup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UGoPickup)
}

void UGoPickup::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  whid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UGoPickup::~UGoPickup() {
  // @@protoc_insertion_point(destructor:ups.UGoPickup)
  SharedDtor();
}

void UGoPickup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UGoPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UGoPickup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGoPickup_descriptor_;
}

const UGoPickup& UGoPickup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UGoPickup* UGoPickup::default_instance_ = NULL;

UGoPickup* UGoPickup::New() const {
  return new UGoPickup;
}

void UGoPickup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UGoPickup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(truckid_, whid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UGoPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UGoPickup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_whid;
        break;
      }

      // required int32 whid = 2;
      case 2: {
        if (tag == 16) {
         parse_whid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whid_)));
          set_has_whid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UGoPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UGoPickup)
  return false;
#undef DO_
}

void UGoPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UGoPickup)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // required int32 whid = 2;
  if (has_whid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->whid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UGoPickup)
}

::google::protobuf::uint8* UGoPickup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UGoPickup)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // required int32 whid = 2;
  if (has_whid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->whid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UGoPickup)
  return target;
}

int UGoPickup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 truckid = 1;
    if (has_truckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->truckid());
    }

    // required int32 whid = 2;
    if (has_whid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UGoPickup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UGoPickup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UGoPickup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UGoPickup::MergeFrom(const UGoPickup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
    if (from.has_whid()) {
      set_whid(from.whid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UGoPickup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UGoPickup::CopyFrom(const UGoPickup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGoPickup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UGoPickup::Swap(UGoPickup* other) {
  if (other != this) {
    std::swap(truckid_, other->truckid_);
    std::swap(whid_, other->whid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UGoPickup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UGoPickup_descriptor_;
  metadata.reflection = UGoPickup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UFinished::kTruckidFieldNumber;
const int UFinished::kXFieldNumber;
const int UFinished::kYFieldNumber;
#endif  // !_MSC_VER

UFinished::UFinished()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UFinished)
}

void UFinished::InitAsDefaultInstance() {
}

UFinished::UFinished(const UFinished& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UFinished)
}

void UFinished::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UFinished::~UFinished() {
  // @@protoc_insertion_point(destructor:ups.UFinished)
  SharedDtor();
}

void UFinished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UFinished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UFinished_descriptor_;
}

const UFinished& UFinished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UFinished* UFinished::default_instance_ = NULL;

UFinished* UFinished::New() const {
  return new UFinished;
}

void UFinished::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UFinished*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(truckid_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UFinished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UFinished)
  return false;
#undef DO_
}

void UFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UFinished)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UFinished)
}

::google::protobuf::uint8* UFinished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UFinished)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UFinished)
  return target;
}

int UFinished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 truckid = 1;
    if (has_truckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->truckid());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UFinished::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UFinished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UFinished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UFinished::MergeFrom(const UFinished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UFinished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UFinished::CopyFrom(const UFinished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UFinished::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UFinished::Swap(UFinished* other) {
  if (other != this) {
    std::swap(truckid_, other->truckid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UFinished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UFinished_descriptor_;
  metadata.reflection = UFinished_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UDeliveryMade::kTruckidFieldNumber;
const int UDeliveryMade::kPackageidFieldNumber;
#endif  // !_MSC_VER

UDeliveryMade::UDeliveryMade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UDeliveryMade)
}

void UDeliveryMade::InitAsDefaultInstance() {
}

UDeliveryMade::UDeliveryMade(const UDeliveryMade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UDeliveryMade)
}

void UDeliveryMade::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  packageid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UDeliveryMade::~UDeliveryMade() {
  // @@protoc_insertion_point(destructor:ups.UDeliveryMade)
  SharedDtor();
}

void UDeliveryMade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UDeliveryMade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UDeliveryMade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UDeliveryMade_descriptor_;
}

const UDeliveryMade& UDeliveryMade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UDeliveryMade* UDeliveryMade::default_instance_ = NULL;

UDeliveryMade* UDeliveryMade::New() const {
  return new UDeliveryMade;
}

void UDeliveryMade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UDeliveryMade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(packageid_, truckid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UDeliveryMade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UDeliveryMade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_packageid;
        break;
      }

      // required int64 packageid = 2;
      case 2: {
        if (tag == 16) {
         parse_packageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UDeliveryMade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UDeliveryMade)
  return false;
#undef DO_
}

void UDeliveryMade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UDeliveryMade)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // required int64 packageid = 2;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->packageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UDeliveryMade)
}

::google::protobuf::uint8* UDeliveryMade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UDeliveryMade)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // required int64 packageid = 2;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->packageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UDeliveryMade)
  return target;
}

int UDeliveryMade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 truckid = 1;
    if (has_truckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->truckid());
    }

    // required int64 packageid = 2;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UDeliveryMade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UDeliveryMade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UDeliveryMade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UDeliveryMade::MergeFrom(const UDeliveryMade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UDeliveryMade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDeliveryMade::CopyFrom(const UDeliveryMade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDeliveryMade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UDeliveryMade::Swap(UDeliveryMade* other) {
  if (other != this) {
    std::swap(truckid_, other->truckid_);
    std::swap(packageid_, other->packageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UDeliveryMade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UDeliveryMade_descriptor_;
  metadata.reflection = UDeliveryMade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UDeliveryLocation::kPackageidFieldNumber;
const int UDeliveryLocation::kXFieldNumber;
const int UDeliveryLocation::kYFieldNumber;
#endif  // !_MSC_VER

UDeliveryLocation::UDeliveryLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UDeliveryLocation)
}

void UDeliveryLocation::InitAsDefaultInstance() {
}

UDeliveryLocation::UDeliveryLocation(const UDeliveryLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UDeliveryLocation)
}

void UDeliveryLocation::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = GOOGLE_LONGLONG(0);
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UDeliveryLocation::~UDeliveryLocation() {
  // @@protoc_insertion_point(destructor:ups.UDeliveryLocation)
  SharedDtor();
}

void UDeliveryLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UDeliveryLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UDeliveryLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UDeliveryLocation_descriptor_;
}

const UDeliveryLocation& UDeliveryLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UDeliveryLocation* UDeliveryLocation::default_instance_ = NULL;

UDeliveryLocation* UDeliveryLocation::New() const {
  return new UDeliveryLocation;
}

void UDeliveryLocation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UDeliveryLocation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(packageid_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UDeliveryLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UDeliveryLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 packageid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UDeliveryLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UDeliveryLocation)
  return false;
#undef DO_
}

void UDeliveryLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UDeliveryLocation)
  // required int64 packageid = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->packageid(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UDeliveryLocation)
}

::google::protobuf::uint8* UDeliveryLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UDeliveryLocation)
  // required int64 packageid = 1;
  if (has_packageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->packageid(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UDeliveryLocation)
  return target;
}

int UDeliveryLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->packageid());
    }

    // required int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UDeliveryLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UDeliveryLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UDeliveryLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UDeliveryLocation::MergeFrom(const UDeliveryLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UDeliveryLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UDeliveryLocation::CopyFrom(const UDeliveryLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDeliveryLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UDeliveryLocation::Swap(UDeliveryLocation* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UDeliveryLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UDeliveryLocation_descriptor_;
  metadata.reflection = UDeliveryLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UGoDeliver::kTruckidFieldNumber;
const int UGoDeliver::kPackagesFieldNumber;
#endif  // !_MSC_VER

UGoDeliver::UGoDeliver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UGoDeliver)
}

void UGoDeliver::InitAsDefaultInstance() {
}

UGoDeliver::UGoDeliver(const UGoDeliver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UGoDeliver)
}

void UGoDeliver::SharedCtor() {
  _cached_size_ = 0;
  truckid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UGoDeliver::~UGoDeliver() {
  // @@protoc_insertion_point(destructor:ups.UGoDeliver)
  SharedDtor();
}

void UGoDeliver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UGoDeliver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UGoDeliver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UGoDeliver_descriptor_;
}

const UGoDeliver& UGoDeliver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UGoDeliver* UGoDeliver::default_instance_ = NULL;

UGoDeliver* UGoDeliver::New() const {
  return new UGoDeliver;
}

void UGoDeliver::Clear() {
  truckid_ = 0;
  packages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UGoDeliver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UGoDeliver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 truckid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &truckid_)));
          set_has_truckid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packages;
        break;
      }

      // repeated .ups.UDeliveryLocation packages = 2;
      case 2: {
        if (tag == 18) {
         parse_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UGoDeliver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UGoDeliver)
  return false;
#undef DO_
}

void UGoDeliver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UGoDeliver)
  // required int32 truckid = 1;
  if (has_truckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->truckid(), output);
  }

  // repeated .ups.UDeliveryLocation packages = 2;
  for (int i = 0; i < this->packages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->packages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UGoDeliver)
}

::google::protobuf::uint8* UGoDeliver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UGoDeliver)
  // required int32 truckid = 1;
  if (has_truckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->truckid(), target);
  }

  // repeated .ups.UDeliveryLocation packages = 2;
  for (int i = 0; i < this->packages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->packages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UGoDeliver)
  return target;
}

int UGoDeliver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 truckid = 1;
    if (has_truckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->truckid());
    }

  }
  // repeated .ups.UDeliveryLocation packages = 2;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UGoDeliver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UGoDeliver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UGoDeliver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UGoDeliver::MergeFrom(const UGoDeliver& from) {
  GOOGLE_CHECK_NE(&from, this);
  packages_.MergeFrom(from.packages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_truckid()) {
      set_truckid(from.truckid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UGoDeliver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UGoDeliver::CopyFrom(const UGoDeliver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UGoDeliver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->packages())) return false;
  return true;
}

void UGoDeliver::Swap(UGoDeliver* other) {
  if (other != this) {
    std::swap(truckid_, other->truckid_);
    packages_.Swap(&other->packages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UGoDeliver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UGoDeliver_descriptor_;
  metadata.reflection = UGoDeliver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UCommands::kDeliveriesFieldNumber;
const int UCommands::kPickupsFieldNumber;
const int UCommands::kSimspeedFieldNumber;
const int UCommands::kDisconnectFieldNumber;
#endif  // !_MSC_VER

UCommands::UCommands()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UCommands)
}

void UCommands::InitAsDefaultInstance() {
}

UCommands::UCommands(const UCommands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UCommands)
}

void UCommands::SharedCtor() {
  _cached_size_ = 0;
  simspeed_ = 0u;
  disconnect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UCommands::~UCommands() {
  // @@protoc_insertion_point(destructor:ups.UCommands)
  SharedDtor();
}

void UCommands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UCommands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UCommands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UCommands_descriptor_;
}

const UCommands& UCommands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UCommands* UCommands::default_instance_ = NULL;

UCommands* UCommands::New() const {
  return new UCommands;
}

void UCommands::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UCommands*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(simspeed_, disconnect_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  deliveries_.Clear();
  pickups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UCommands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UCommands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ups.UGoDeliver deliveries = 1;
      case 1: {
        if (tag == 10) {
         parse_deliveries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deliveries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_deliveries;
        if (input->ExpectTag(18)) goto parse_pickups;
        break;
      }

      // repeated .ups.UGoPickup pickups = 2;
      case 2: {
        if (tag == 18) {
         parse_pickups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pickups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pickups;
        if (input->ExpectTag(24)) goto parse_simspeed;
        break;
      }

      // optional uint32 simspeed = 3;
      case 3: {
        if (tag == 24) {
         parse_simspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &simspeed_)));
          set_has_simspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disconnect;
        break;
      }

      // optional bool disconnect = 4;
      case 4: {
        if (tag == 32) {
         parse_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disconnect_)));
          set_has_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UCommands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UCommands)
  return false;
#undef DO_
}

void UCommands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UCommands)
  // repeated .ups.UGoDeliver deliveries = 1;
  for (int i = 0; i < this->deliveries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deliveries(i), output);
  }

  // repeated .ups.UGoPickup pickups = 2;
  for (int i = 0; i < this->pickups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pickups(i), output);
  }

  // optional uint32 simspeed = 3;
  if (has_simspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->simspeed(), output);
  }

  // optional bool disconnect = 4;
  if (has_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disconnect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UCommands)
}

::google::protobuf::uint8* UCommands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UCommands)
  // repeated .ups.UGoDeliver deliveries = 1;
  for (int i = 0; i < this->deliveries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deliveries(i), target);
  }

  // repeated .ups.UGoPickup pickups = 2;
  for (int i = 0; i < this->pickups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pickups(i), target);
  }

  // optional uint32 simspeed = 3;
  if (has_simspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->simspeed(), target);
  }

  // optional bool disconnect = 4;
  if (has_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disconnect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UCommands)
  return target;
}

int UCommands::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 simspeed = 3;
    if (has_simspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->simspeed());
    }

    // optional bool disconnect = 4;
    if (has_disconnect()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ups.UGoDeliver deliveries = 1;
  total_size += 1 * this->deliveries_size();
  for (int i = 0; i < this->deliveries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deliveries(i));
  }

  // repeated .ups.UGoPickup pickups = 2;
  total_size += 1 * this->pickups_size();
  for (int i = 0; i < this->pickups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pickups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UCommands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UCommands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UCommands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UCommands::MergeFrom(const UCommands& from) {
  GOOGLE_CHECK_NE(&from, this);
  deliveries_.MergeFrom(from.deliveries_);
  pickups_.MergeFrom(from.pickups_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_simspeed()) {
      set_simspeed(from.simspeed());
    }
    if (from.has_disconnect()) {
      set_disconnect(from.disconnect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UCommands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UCommands::CopyFrom(const UCommands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UCommands::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->deliveries())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pickups())) return false;
  return true;
}

void UCommands::Swap(UCommands* other) {
  if (other != this) {
    deliveries_.Swap(&other->deliveries_);
    pickups_.Swap(&other->pickups_);
    std::swap(simspeed_, other->simspeed_);
    std::swap(disconnect_, other->disconnect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UCommands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UCommands_descriptor_;
  metadata.reflection = UCommands_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UResponses::kCompletionsFieldNumber;
const int UResponses::kDeliveredFieldNumber;
const int UResponses::kErrorFieldNumber;
const int UResponses::kFinishedFieldNumber;
#endif  // !_MSC_VER

UResponses::UResponses()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ups.UResponses)
}

void UResponses::InitAsDefaultInstance() {
}

UResponses::UResponses(const UResponses& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ups.UResponses)
}

void UResponses::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  finished_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UResponses::~UResponses() {
  // @@protoc_insertion_point(destructor:ups.UResponses)
  SharedDtor();
}

void UResponses::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void UResponses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UResponses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UResponses_descriptor_;
}

const UResponses& UResponses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ups_2eproto();
  return *default_instance_;
}

UResponses* UResponses::default_instance_ = NULL;

UResponses* UResponses::New() const {
  return new UResponses;
}

void UResponses::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
    finished_ = false;
  }
  completions_.Clear();
  delivered_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UResponses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ups.UResponses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ups.UFinished completions = 1;
      case 1: {
        if (tag == 10) {
         parse_completions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_completions;
        if (input->ExpectTag(18)) goto parse_delivered;
        break;
      }

      // repeated .ups.UDeliveryMade delivered = 2;
      case 2: {
        if (tag == 18) {
         parse_delivered:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delivered()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_delivered;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional string error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_finished;
        break;
      }

      // optional bool finished = 4;
      case 4: {
        if (tag == 32) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ups.UResponses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ups.UResponses)
  return false;
#undef DO_
}

void UResponses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ups.UResponses)
  // repeated .ups.UFinished completions = 1;
  for (int i = 0; i < this->completions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->completions(i), output);
  }

  // repeated .ups.UDeliveryMade delivered = 2;
  for (int i = 0; i < this->delivered_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->delivered(i), output);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error(), output);
  }

  // optional bool finished = 4;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finished(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ups.UResponses)
}

::google::protobuf::uint8* UResponses::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ups.UResponses)
  // repeated .ups.UFinished completions = 1;
  for (int i = 0; i < this->completions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->completions(i), target);
  }

  // repeated .ups.UDeliveryMade delivered = 2;
  for (int i = 0; i < this->delivered_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->delivered(i), target);
  }

  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }

  // optional bool finished = 4;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finished(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ups.UResponses)
  return target;
}

int UResponses::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional bool finished = 4;
    if (has_finished()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ups.UFinished completions = 1;
  total_size += 1 * this->completions_size();
  for (int i = 0; i < this->completions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completions(i));
  }

  // repeated .ups.UDeliveryMade delivered = 2;
  total_size += 1 * this->delivered_size();
  for (int i = 0; i < this->delivered_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delivered(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UResponses::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UResponses* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UResponses*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UResponses::MergeFrom(const UResponses& from) {
  GOOGLE_CHECK_NE(&from, this);
  completions_.MergeFrom(from.completions_);
  delivered_.MergeFrom(from.delivered_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UResponses::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UResponses::CopyFrom(const UResponses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UResponses::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->completions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->delivered())) return false;
  return true;
}

void UResponses::Swap(UResponses* other) {
  if (other != this) {
    completions_.Swap(&other->completions_);
    delivered_.Swap(&other->delivered_);
    std::swap(error_, other->error_);
    std::swap(finished_, other->finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UResponses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UResponses_descriptor_;
  metadata.reflection = UResponses_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ups

// @@protoc_insertion_point(global_scope)
