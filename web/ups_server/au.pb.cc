// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: au.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "au.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace au {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Warehouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Warehouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Truck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Truck_reflection_ = NULL;
const ::google::protobuf::Descriptor* A2Upickuprequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  A2Upickuprequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* U2Agenpid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U2Agenpid_reflection_ = NULL;
const ::google::protobuf::Descriptor* U2Atruckarrive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U2Atruckarrive_reflection_ = NULL;
const ::google::protobuf::Descriptor* A2Utruckdepart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  A2Utruckdepart_reflection_ = NULL;
const ::google::protobuf::Descriptor* A2U_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  A2U_reflection_ = NULL;
const ::google::protobuf::Descriptor* U2A_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  U2A_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_au_2eproto() {
  protobuf_AddDesc_au_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "au.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Warehouse_descriptor_ = file->message_type(1);
  static const int Warehouse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warehouse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warehouse, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warehouse, y_),
  };
  Warehouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Warehouse_descriptor_,
      Warehouse::default_instance_,
      Warehouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warehouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Warehouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Warehouse));
  Position_descriptor_ = file->message_type(2);
  static const int Position_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  Truck_descriptor_ = file->message_type(3);
  static const int Truck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Truck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Truck, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Truck, y_),
  };
  Truck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Truck_descriptor_,
      Truck::default_instance_,
      Truck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Truck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Truck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Truck));
  A2Upickuprequest_descriptor_ = file->message_type(4);
  static const int A2Upickuprequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Upickuprequest, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Upickuprequest, wh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Upickuprequest, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Upickuprequest, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Upickuprequest, upsaccount_),
  };
  A2Upickuprequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      A2Upickuprequest_descriptor_,
      A2Upickuprequest::default_instance_,
      A2Upickuprequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Upickuprequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Upickuprequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(A2Upickuprequest));
  U2Agenpid_descriptor_ = file->message_type(5);
  static const int U2Agenpid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Agenpid, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Agenpid, oid_),
  };
  U2Agenpid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U2Agenpid_descriptor_,
      U2Agenpid::default_instance_,
      U2Agenpid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Agenpid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Agenpid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U2Agenpid));
  U2Atruckarrive_descriptor_ = file->message_type(6);
  static const int U2Atruckarrive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Atruckarrive, tr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Atruckarrive, obsolete_pids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Atruckarrive, whid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Atruckarrive, oids_),
  };
  U2Atruckarrive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U2Atruckarrive_descriptor_,
      U2Atruckarrive::default_instance_,
      U2Atruckarrive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Atruckarrive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2Atruckarrive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U2Atruckarrive));
  A2Utruckdepart_descriptor_ = file->message_type(7);
  static const int A2Utruckdepart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Utruckdepart, tr_),
  };
  A2Utruckdepart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      A2Utruckdepart_descriptor_,
      A2Utruckdepart::default_instance_,
      A2Utruckdepart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Utruckdepart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2Utruckdepart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(A2Utruckdepart));
  A2U_descriptor_ = file->message_type(8);
  static const int A2U_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2U, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2U, td_),
  };
  A2U_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      A2U_descriptor_,
      A2U::default_instance_,
      A2U_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2U, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A2U, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(A2U));
  U2A_descriptor_ = file->message_type(9);
  static const int U2A_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2A, gp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2A, ta_),
  };
  U2A_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      U2A_descriptor_,
      U2A::default_instance_,
      U2A_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2A, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(U2A, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(U2A));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_au_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Warehouse_descriptor_, &Warehouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Truck_descriptor_, &Truck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    A2Upickuprequest_descriptor_, &A2Upickuprequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U2Agenpid_descriptor_, &U2Agenpid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U2Atruckarrive_descriptor_, &U2Atruckarrive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    A2Utruckdepart_descriptor_, &A2Utruckdepart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    A2U_descriptor_, &A2U::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    U2A_descriptor_, &U2A::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_au_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Warehouse::default_instance_;
  delete Warehouse_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Truck::default_instance_;
  delete Truck_reflection_;
  delete A2Upickuprequest::default_instance_;
  delete A2Upickuprequest_reflection_;
  delete U2Agenpid::default_instance_;
  delete U2Agenpid_reflection_;
  delete U2Atruckarrive::default_instance_;
  delete U2Atruckarrive_reflection_;
  delete A2Utruckdepart::default_instance_;
  delete A2Utruckdepart_reflection_;
  delete A2U::default_instance_;
  delete A2U_reflection_;
  delete U2A::default_instance_;
  delete U2A_reflection_;
}

void protobuf_AddDesc_au_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010au.proto\022\002au\".\n\004Item\022\013\n\003des\030\001 \002(\t\022\r\n\005c"
    "ount\030\002 \002(\005\022\n\n\002id\030\003 \001(\003\"-\n\tWarehouse\022\n\n\002i"
    "d\030\001 \002(\005\022\t\n\001X\030\002 \002(\005\022\t\n\001Y\030\003 \002(\005\" \n\010Positio"
    "n\022\t\n\001X\030\001 \002(\005\022\t\n\001Y\030\002 \002(\005\")\n\005Truck\022\n\n\002id\030\001"
    " \002(\005\022\t\n\001X\030\002 \001(\005\022\t\n\001Y\030\003 \001(\005\"\212\001\n\020A2Upickup"
    "request\022\027\n\005items\030\001 \003(\0132\010.au.Item\022\031\n\002wh\030\002"
    " \002(\0132\r.au.Warehouse\022\013\n\003oid\030\003 \002(\003\022!\n\013dest"
    "ination\030\004 \002(\0132\014.au.Position\022\022\n\nupsAccoun"
    "t\030\005 \001(\t\"%\n\tU2Agenpid\022\013\n\003pid\030\001 \002(\003\022\013\n\003oid"
    "\030\002 \002(\003\"Z\n\016U2Atruckarrive\022\025\n\002tr\030\001 \002(\0132\t.a"
    "u.Truck\022\025\n\rOBSOLETE_pids\030\002 \003(\003\022\014\n\004whid\030\003"
    " \002(\005\022\014\n\004oids\030\004 \003(\003\"\'\n\016A2Utruckdepart\022\025\n\002"
    "tr\030\001 \002(\0132\t.au.Truck\"G\n\003A2U\022 \n\002pr\030\001 \003(\0132\024"
    ".au.A2Upickuprequest\022\036\n\002td\030\002 \003(\0132\022.au.A2"
    "Utruckdepart\"@\n\003U2A\022\031\n\002gp\030\001 \003(\0132\r.au.U2A"
    "genpid\022\036\n\002ta\030\002 \003(\0132\022.au.U2Atruckarrive", 638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "au.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Warehouse::default_instance_ = new Warehouse();
  Position::default_instance_ = new Position();
  Truck::default_instance_ = new Truck();
  A2Upickuprequest::default_instance_ = new A2Upickuprequest();
  U2Agenpid::default_instance_ = new U2Agenpid();
  U2Atruckarrive::default_instance_ = new U2Atruckarrive();
  A2Utruckdepart::default_instance_ = new A2Utruckdepart();
  A2U::default_instance_ = new A2U();
  U2A::default_instance_ = new U2A();
  Item::default_instance_->InitAsDefaultInstance();
  Warehouse::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Truck::default_instance_->InitAsDefaultInstance();
  A2Upickuprequest::default_instance_->InitAsDefaultInstance();
  U2Agenpid::default_instance_->InitAsDefaultInstance();
  U2Atruckarrive::default_instance_->InitAsDefaultInstance();
  A2Utruckdepart::default_instance_->InitAsDefaultInstance();
  A2U::default_instance_->InitAsDefaultInstance();
  U2A::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_au_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_au_2eproto {
  StaticDescriptorInitializer_au_2eproto() {
    protobuf_AddDesc_au_2eproto();
  }
} static_descriptor_initializer_au_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kDesFieldNumber;
const int Item::kCountFieldNumber;
const int Item::kIdFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.Item)
}

void Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:au.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, count_);
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        des_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string des = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "des");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.Item)
  // required string des = 1;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "des");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->des(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.Item)
  // required string des = 1;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "des");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->des(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string des = 1;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(des_, other->des_);
    std::swap(count_, other->count_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Warehouse::kIdFieldNumber;
const int Warehouse::kXFieldNumber;
const int Warehouse::kYFieldNumber;
#endif  // !_MSC_VER

Warehouse::Warehouse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.Warehouse)
}

void Warehouse::InitAsDefaultInstance() {
}

Warehouse::Warehouse(const Warehouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.Warehouse)
}

void Warehouse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Warehouse::~Warehouse() {
  // @@protoc_insertion_point(destructor:au.Warehouse)
  SharedDtor();
}

void Warehouse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Warehouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Warehouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Warehouse_descriptor_;
}

const Warehouse& Warehouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

Warehouse* Warehouse::default_instance_ = NULL;

Warehouse* Warehouse::New() const {
  return new Warehouse;
}

void Warehouse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Warehouse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Warehouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.Warehouse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_X;
        break;
      }

      // required int32 X = 2;
      case 2: {
        if (tag == 16) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }

      // required int32 Y = 3;
      case 3: {
        if (tag == 24) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.Warehouse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.Warehouse)
  return false;
#undef DO_
}

void Warehouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.Warehouse)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 X = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 Y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.Warehouse)
}

::google::protobuf::uint8* Warehouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.Warehouse)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 X = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 Y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.Warehouse)
  return target;
}

int Warehouse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 X = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 Y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Warehouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Warehouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Warehouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Warehouse::MergeFrom(const Warehouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Warehouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Warehouse::CopyFrom(const Warehouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Warehouse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Warehouse::Swap(Warehouse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Warehouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Warehouse_descriptor_;
  metadata.reflection = Warehouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:au.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Position*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // required int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.Position)
  // required int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.Position)
  // required int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Truck::kIdFieldNumber;
const int Truck::kXFieldNumber;
const int Truck::kYFieldNumber;
#endif  // !_MSC_VER

Truck::Truck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.Truck)
}

void Truck::InitAsDefaultInstance() {
}

Truck::Truck(const Truck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.Truck)
}

void Truck::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Truck::~Truck() {
  // @@protoc_insertion_point(destructor:au.Truck)
  SharedDtor();
}

void Truck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Truck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Truck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Truck_descriptor_;
}

const Truck& Truck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

Truck* Truck::default_instance_ = NULL;

Truck* Truck::New() const {
  return new Truck;
}

void Truck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Truck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Truck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.Truck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_X;
        break;
      }

      // optional int32 X = 2;
      case 2: {
        if (tag == 16) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Y;
        break;
      }

      // optional int32 Y = 3;
      case 3: {
        if (tag == 24) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.Truck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.Truck)
  return false;
#undef DO_
}

void Truck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.Truck)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 X = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 Y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.Truck)
}

::google::protobuf::uint8* Truck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.Truck)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 X = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 Y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.Truck)
  return target;
}

int Truck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 X = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Truck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Truck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Truck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Truck::MergeFrom(const Truck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Truck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Truck::CopyFrom(const Truck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Truck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Truck::Swap(Truck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Truck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Truck_descriptor_;
  metadata.reflection = Truck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int A2Upickuprequest::kItemsFieldNumber;
const int A2Upickuprequest::kWhFieldNumber;
const int A2Upickuprequest::kOidFieldNumber;
const int A2Upickuprequest::kDestinationFieldNumber;
const int A2Upickuprequest::kUpsAccountFieldNumber;
#endif  // !_MSC_VER

A2Upickuprequest::A2Upickuprequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.A2Upickuprequest)
}

void A2Upickuprequest::InitAsDefaultInstance() {
  wh_ = const_cast< ::au::Warehouse*>(&::au::Warehouse::default_instance());
  destination_ = const_cast< ::au::Position*>(&::au::Position::default_instance());
}

A2Upickuprequest::A2Upickuprequest(const A2Upickuprequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.A2Upickuprequest)
}

void A2Upickuprequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wh_ = NULL;
  oid_ = GOOGLE_LONGLONG(0);
  destination_ = NULL;
  upsaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

A2Upickuprequest::~A2Upickuprequest() {
  // @@protoc_insertion_point(destructor:au.A2Upickuprequest)
  SharedDtor();
}

void A2Upickuprequest::SharedDtor() {
  if (upsaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete upsaccount_;
  }
  if (this != default_instance_) {
    delete wh_;
    delete destination_;
  }
}

void A2Upickuprequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* A2Upickuprequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return A2Upickuprequest_descriptor_;
}

const A2Upickuprequest& A2Upickuprequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

A2Upickuprequest* A2Upickuprequest::default_instance_ = NULL;

A2Upickuprequest* A2Upickuprequest::New() const {
  return new A2Upickuprequest;
}

void A2Upickuprequest::Clear() {
  if (_has_bits_[0 / 32] & 30) {
    if (has_wh()) {
      if (wh_ != NULL) wh_->::au::Warehouse::Clear();
    }
    oid_ = GOOGLE_LONGLONG(0);
    if (has_destination()) {
      if (destination_ != NULL) destination_->::au::Position::Clear();
    }
    if (has_upsaccount()) {
      if (upsaccount_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        upsaccount_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool A2Upickuprequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.A2Upickuprequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .au.Item items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_wh;
        break;
      }

      // required .au.Warehouse wh = 2;
      case 2: {
        if (tag == 18) {
         parse_wh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oid;
        break;
      }

      // required int64 oid = 3;
      case 3: {
        if (tag == 24) {
         parse_oid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oid_)));
          set_has_oid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_destination;
        break;
      }

      // required .au.Position destination = 4;
      case 4: {
        if (tag == 34) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upsAccount;
        break;
      }

      // optional string upsAccount = 5;
      case 5: {
        if (tag == 42) {
         parse_upsAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upsaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upsaccount().data(), this->upsaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "upsaccount");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.A2Upickuprequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.A2Upickuprequest)
  return false;
#undef DO_
}

void A2Upickuprequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.A2Upickuprequest)
  // repeated .au.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // required .au.Warehouse wh = 2;
  if (has_wh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wh(), output);
  }

  // required int64 oid = 3;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->oid(), output);
  }

  // required .au.Position destination = 4;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->destination(), output);
  }

  // optional string upsAccount = 5;
  if (has_upsaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upsaccount().data(), this->upsaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upsaccount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->upsaccount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.A2Upickuprequest)
}

::google::protobuf::uint8* A2Upickuprequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.A2Upickuprequest)
  // repeated .au.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // required .au.Warehouse wh = 2;
  if (has_wh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wh(), target);
  }

  // required int64 oid = 3;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->oid(), target);
  }

  // required .au.Position destination = 4;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->destination(), target);
  }

  // optional string upsAccount = 5;
  if (has_upsaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upsaccount().data(), this->upsaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "upsaccount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->upsaccount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.A2Upickuprequest)
  return target;
}

int A2Upickuprequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .au.Warehouse wh = 2;
    if (has_wh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wh());
    }

    // required int64 oid = 3;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oid());
    }

    // required .au.Position destination = 4;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

    // optional string upsAccount = 5;
    if (has_upsaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upsaccount());
    }

  }
  // repeated .au.Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void A2Upickuprequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const A2Upickuprequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const A2Upickuprequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void A2Upickuprequest::MergeFrom(const A2Upickuprequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_wh()) {
      mutable_wh()->::au::Warehouse::MergeFrom(from.wh());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
    if (from.has_destination()) {
      mutable_destination()->::au::Position::MergeFrom(from.destination());
    }
    if (from.has_upsaccount()) {
      set_upsaccount(from.upsaccount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void A2Upickuprequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2Upickuprequest::CopyFrom(const A2Upickuprequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2Upickuprequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (has_wh()) {
    if (!this->wh().IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination().IsInitialized()) return false;
  }
  return true;
}

void A2Upickuprequest::Swap(A2Upickuprequest* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(wh_, other->wh_);
    std::swap(oid_, other->oid_);
    std::swap(destination_, other->destination_);
    std::swap(upsaccount_, other->upsaccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata A2Upickuprequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = A2Upickuprequest_descriptor_;
  metadata.reflection = A2Upickuprequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U2Agenpid::kPidFieldNumber;
const int U2Agenpid::kOidFieldNumber;
#endif  // !_MSC_VER

U2Agenpid::U2Agenpid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.U2Agenpid)
}

void U2Agenpid::InitAsDefaultInstance() {
}

U2Agenpid::U2Agenpid(const U2Agenpid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.U2Agenpid)
}

void U2Agenpid::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  oid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U2Agenpid::~U2Agenpid() {
  // @@protoc_insertion_point(destructor:au.U2Agenpid)
  SharedDtor();
}

void U2Agenpid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void U2Agenpid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U2Agenpid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U2Agenpid_descriptor_;
}

const U2Agenpid& U2Agenpid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

U2Agenpid* U2Agenpid::default_instance_ = NULL;

U2Agenpid* U2Agenpid::New() const {
  return new U2Agenpid;
}

void U2Agenpid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<U2Agenpid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, oid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U2Agenpid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.U2Agenpid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oid;
        break;
      }

      // required int64 oid = 2;
      case 2: {
        if (tag == 16) {
         parse_oid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oid_)));
          set_has_oid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.U2Agenpid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.U2Agenpid)
  return false;
#undef DO_
}

void U2Agenpid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.U2Agenpid)
  // required int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // required int64 oid = 2;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->oid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.U2Agenpid)
}

::google::protobuf::uint8* U2Agenpid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.U2Agenpid)
  // required int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // required int64 oid = 2;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->oid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.U2Agenpid)
  return target;
}

int U2Agenpid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // required int64 oid = 2;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U2Agenpid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U2Agenpid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U2Agenpid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U2Agenpid::MergeFrom(const U2Agenpid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U2Agenpid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U2Agenpid::CopyFrom(const U2Agenpid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U2Agenpid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void U2Agenpid::Swap(U2Agenpid* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U2Agenpid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U2Agenpid_descriptor_;
  metadata.reflection = U2Agenpid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U2Atruckarrive::kTrFieldNumber;
const int U2Atruckarrive::kOBSOLETEPidsFieldNumber;
const int U2Atruckarrive::kWhidFieldNumber;
const int U2Atruckarrive::kOidsFieldNumber;
#endif  // !_MSC_VER

U2Atruckarrive::U2Atruckarrive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.U2Atruckarrive)
}

void U2Atruckarrive::InitAsDefaultInstance() {
  tr_ = const_cast< ::au::Truck*>(&::au::Truck::default_instance());
}

U2Atruckarrive::U2Atruckarrive(const U2Atruckarrive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.U2Atruckarrive)
}

void U2Atruckarrive::SharedCtor() {
  _cached_size_ = 0;
  tr_ = NULL;
  whid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U2Atruckarrive::~U2Atruckarrive() {
  // @@protoc_insertion_point(destructor:au.U2Atruckarrive)
  SharedDtor();
}

void U2Atruckarrive::SharedDtor() {
  if (this != default_instance_) {
    delete tr_;
  }
}

void U2Atruckarrive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U2Atruckarrive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U2Atruckarrive_descriptor_;
}

const U2Atruckarrive& U2Atruckarrive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

U2Atruckarrive* U2Atruckarrive::default_instance_ = NULL;

U2Atruckarrive* U2Atruckarrive::New() const {
  return new U2Atruckarrive;
}

void U2Atruckarrive::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_tr()) {
      if (tr_ != NULL) tr_->::au::Truck::Clear();
    }
    whid_ = 0;
  }
  obsolete_pids_.Clear();
  oids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U2Atruckarrive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.U2Atruckarrive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .au.Truck tr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OBSOLETE_pids;
        break;
      }

      // repeated int64 OBSOLETE_pids = 2;
      case 2: {
        if (tag == 16) {
         parse_OBSOLETE_pids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_obsolete_pids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_obsolete_pids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OBSOLETE_pids;
        if (input->ExpectTag(24)) goto parse_whid;
        break;
      }

      // required int32 whid = 3;
      case 3: {
        if (tag == 24) {
         parse_whid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whid_)));
          set_has_whid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_oids;
        break;
      }

      // repeated int64 oids = 4;
      case 4: {
        if (tag == 32) {
         parse_oids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_oids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_oids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_oids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.U2Atruckarrive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.U2Atruckarrive)
  return false;
#undef DO_
}

void U2Atruckarrive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.U2Atruckarrive)
  // required .au.Truck tr = 1;
  if (has_tr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tr(), output);
  }

  // repeated int64 OBSOLETE_pids = 2;
  for (int i = 0; i < this->obsolete_pids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->obsolete_pids(i), output);
  }

  // required int32 whid = 3;
  if (has_whid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->whid(), output);
  }

  // repeated int64 oids = 4;
  for (int i = 0; i < this->oids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->oids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.U2Atruckarrive)
}

::google::protobuf::uint8* U2Atruckarrive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.U2Atruckarrive)
  // required .au.Truck tr = 1;
  if (has_tr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tr(), target);
  }

  // repeated int64 OBSOLETE_pids = 2;
  for (int i = 0; i < this->obsolete_pids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->obsolete_pids(i), target);
  }

  // required int32 whid = 3;
  if (has_whid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->whid(), target);
  }

  // repeated int64 oids = 4;
  for (int i = 0; i < this->oids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->oids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.U2Atruckarrive)
  return target;
}

int U2Atruckarrive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .au.Truck tr = 1;
    if (has_tr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tr());
    }

    // required int32 whid = 3;
    if (has_whid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whid());
    }

  }
  // repeated int64 OBSOLETE_pids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->obsolete_pids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->obsolete_pids(i));
    }
    total_size += 1 * this->obsolete_pids_size() + data_size;
  }

  // repeated int64 oids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->oids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->oids(i));
    }
    total_size += 1 * this->oids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U2Atruckarrive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U2Atruckarrive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U2Atruckarrive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U2Atruckarrive::MergeFrom(const U2Atruckarrive& from) {
  GOOGLE_CHECK_NE(&from, this);
  obsolete_pids_.MergeFrom(from.obsolete_pids_);
  oids_.MergeFrom(from.oids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tr()) {
      mutable_tr()->::au::Truck::MergeFrom(from.tr());
    }
    if (from.has_whid()) {
      set_whid(from.whid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U2Atruckarrive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U2Atruckarrive::CopyFrom(const U2Atruckarrive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U2Atruckarrive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_tr()) {
    if (!this->tr().IsInitialized()) return false;
  }
  return true;
}

void U2Atruckarrive::Swap(U2Atruckarrive* other) {
  if (other != this) {
    std::swap(tr_, other->tr_);
    obsolete_pids_.Swap(&other->obsolete_pids_);
    std::swap(whid_, other->whid_);
    oids_.Swap(&other->oids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U2Atruckarrive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U2Atruckarrive_descriptor_;
  metadata.reflection = U2Atruckarrive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int A2Utruckdepart::kTrFieldNumber;
#endif  // !_MSC_VER

A2Utruckdepart::A2Utruckdepart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.A2Utruckdepart)
}

void A2Utruckdepart::InitAsDefaultInstance() {
  tr_ = const_cast< ::au::Truck*>(&::au::Truck::default_instance());
}

A2Utruckdepart::A2Utruckdepart(const A2Utruckdepart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.A2Utruckdepart)
}

void A2Utruckdepart::SharedCtor() {
  _cached_size_ = 0;
  tr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

A2Utruckdepart::~A2Utruckdepart() {
  // @@protoc_insertion_point(destructor:au.A2Utruckdepart)
  SharedDtor();
}

void A2Utruckdepart::SharedDtor() {
  if (this != default_instance_) {
    delete tr_;
  }
}

void A2Utruckdepart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* A2Utruckdepart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return A2Utruckdepart_descriptor_;
}

const A2Utruckdepart& A2Utruckdepart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

A2Utruckdepart* A2Utruckdepart::default_instance_ = NULL;

A2Utruckdepart* A2Utruckdepart::New() const {
  return new A2Utruckdepart;
}

void A2Utruckdepart::Clear() {
  if (has_tr()) {
    if (tr_ != NULL) tr_->::au::Truck::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool A2Utruckdepart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.A2Utruckdepart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .au.Truck tr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.A2Utruckdepart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.A2Utruckdepart)
  return false;
#undef DO_
}

void A2Utruckdepart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.A2Utruckdepart)
  // required .au.Truck tr = 1;
  if (has_tr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.A2Utruckdepart)
}

::google::protobuf::uint8* A2Utruckdepart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.A2Utruckdepart)
  // required .au.Truck tr = 1;
  if (has_tr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.A2Utruckdepart)
  return target;
}

int A2Utruckdepart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .au.Truck tr = 1;
    if (has_tr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void A2Utruckdepart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const A2Utruckdepart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const A2Utruckdepart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void A2Utruckdepart::MergeFrom(const A2Utruckdepart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tr()) {
      mutable_tr()->::au::Truck::MergeFrom(from.tr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void A2Utruckdepart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2Utruckdepart::CopyFrom(const A2Utruckdepart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2Utruckdepart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tr()) {
    if (!this->tr().IsInitialized()) return false;
  }
  return true;
}

void A2Utruckdepart::Swap(A2Utruckdepart* other) {
  if (other != this) {
    std::swap(tr_, other->tr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata A2Utruckdepart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = A2Utruckdepart_descriptor_;
  metadata.reflection = A2Utruckdepart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int A2U::kPrFieldNumber;
const int A2U::kTdFieldNumber;
#endif  // !_MSC_VER

A2U::A2U()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.A2U)
}

void A2U::InitAsDefaultInstance() {
}

A2U::A2U(const A2U& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.A2U)
}

void A2U::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

A2U::~A2U() {
  // @@protoc_insertion_point(destructor:au.A2U)
  SharedDtor();
}

void A2U::SharedDtor() {
  if (this != default_instance_) {
  }
}

void A2U::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* A2U::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return A2U_descriptor_;
}

const A2U& A2U::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

A2U* A2U::default_instance_ = NULL;

A2U* A2U::New() const {
  return new A2U;
}

void A2U::Clear() {
  pr_.Clear();
  td_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool A2U::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.A2U)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .au.A2Upickuprequest pr = 1;
      case 1: {
        if (tag == 10) {
         parse_pr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pr;
        if (input->ExpectTag(18)) goto parse_td;
        break;
      }

      // repeated .au.A2Utruckdepart td = 2;
      case 2: {
        if (tag == 18) {
         parse_td:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_td()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_td;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.A2U)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.A2U)
  return false;
#undef DO_
}

void A2U::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.A2U)
  // repeated .au.A2Upickuprequest pr = 1;
  for (int i = 0; i < this->pr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pr(i), output);
  }

  // repeated .au.A2Utruckdepart td = 2;
  for (int i = 0; i < this->td_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->td(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.A2U)
}

::google::protobuf::uint8* A2U::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.A2U)
  // repeated .au.A2Upickuprequest pr = 1;
  for (int i = 0; i < this->pr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pr(i), target);
  }

  // repeated .au.A2Utruckdepart td = 2;
  for (int i = 0; i < this->td_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->td(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.A2U)
  return target;
}

int A2U::ByteSize() const {
  int total_size = 0;

  // repeated .au.A2Upickuprequest pr = 1;
  total_size += 1 * this->pr_size();
  for (int i = 0; i < this->pr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pr(i));
  }

  // repeated .au.A2Utruckdepart td = 2;
  total_size += 1 * this->td_size();
  for (int i = 0; i < this->td_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->td(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void A2U::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const A2U* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const A2U*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void A2U::MergeFrom(const A2U& from) {
  GOOGLE_CHECK_NE(&from, this);
  pr_.MergeFrom(from.pr_);
  td_.MergeFrom(from.td_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void A2U::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A2U::CopyFrom(const A2U& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A2U::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->td())) return false;
  return true;
}

void A2U::Swap(A2U* other) {
  if (other != this) {
    pr_.Swap(&other->pr_);
    td_.Swap(&other->td_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata A2U::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = A2U_descriptor_;
  metadata.reflection = A2U_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int U2A::kGpFieldNumber;
const int U2A::kTaFieldNumber;
#endif  // !_MSC_VER

U2A::U2A()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:au.U2A)
}

void U2A::InitAsDefaultInstance() {
}

U2A::U2A(const U2A& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:au.U2A)
}

void U2A::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

U2A::~U2A() {
  // @@protoc_insertion_point(destructor:au.U2A)
  SharedDtor();
}

void U2A::SharedDtor() {
  if (this != default_instance_) {
  }
}

void U2A::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U2A::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return U2A_descriptor_;
}

const U2A& U2A::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_au_2eproto();
  return *default_instance_;
}

U2A* U2A::default_instance_ = NULL;

U2A* U2A::New() const {
  return new U2A;
}

void U2A::Clear() {
  gp_.Clear();
  ta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool U2A::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:au.U2A)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .au.U2Agenpid gp = 1;
      case 1: {
        if (tag == 10) {
         parse_gp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gp;
        if (input->ExpectTag(18)) goto parse_ta;
        break;
      }

      // repeated .au.U2Atruckarrive ta = 2;
      case 2: {
        if (tag == 18) {
         parse_ta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ta;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:au.U2A)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:au.U2A)
  return false;
#undef DO_
}

void U2A::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:au.U2A)
  // repeated .au.U2Agenpid gp = 1;
  for (int i = 0; i < this->gp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gp(i), output);
  }

  // repeated .au.U2Atruckarrive ta = 2;
  for (int i = 0; i < this->ta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ta(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:au.U2A)
}

::google::protobuf::uint8* U2A::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:au.U2A)
  // repeated .au.U2Agenpid gp = 1;
  for (int i = 0; i < this->gp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gp(i), target);
  }

  // repeated .au.U2Atruckarrive ta = 2;
  for (int i = 0; i < this->ta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ta(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:au.U2A)
  return target;
}

int U2A::ByteSize() const {
  int total_size = 0;

  // repeated .au.U2Agenpid gp = 1;
  total_size += 1 * this->gp_size();
  for (int i = 0; i < this->gp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gp(i));
  }

  // repeated .au.U2Atruckarrive ta = 2;
  total_size += 1 * this->ta_size();
  for (int i = 0; i < this->ta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ta(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U2A::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const U2A* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const U2A*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void U2A::MergeFrom(const U2A& from) {
  GOOGLE_CHECK_NE(&from, this);
  gp_.MergeFrom(from.gp_);
  ta_.MergeFrom(from.ta_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void U2A::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U2A::CopyFrom(const U2A& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U2A::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gp())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ta())) return false;
  return true;
}

void U2A::Swap(U2A* other) {
  if (other != this) {
    gp_.Swap(&other->gp_);
    ta_.Swap(&other->ta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata U2A::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = U2A_descriptor_;
  metadata.reflection = U2A_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace au

// @@protoc_insertion_point(global_scope)
